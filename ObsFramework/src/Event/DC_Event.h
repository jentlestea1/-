//
//
// DC_Event.h
//
//
// Change Record:


#ifndef DC_EVENT_H
#define DC_EVENT_H


#include "../GeneralInclude/BasicTypes.h"
#include "../Base/CC_RootObject.h"
#include "../Qom/object.h"


/*
 * Base class from which all event classes are derived.
 * An event class encapsulates an <i>event report</i>.
 * An event report is used to store information that is generated by
 * an application upon the occurrence of certain conditions. From an implementation
 * point of view, an event is a container for attributes that describe the occurrence
 * that triggered the creation of event report. This class recognizes only
 * two such attributes:<ul>
 * <li>an <i>event type identifier</i> that defines the event category,</li>
 * <li>a <i>time stamp</i> that defines the time when the event was created.</li>
 * </ul>
 * Both attributes are read-write. Applications that need to attach more information
 * to an event report can do so by extending this class.
 * <p>
 * Normally, to each event class is associated an event repository class that
 * encapsulates a container for a set of event reports.
 * The event repository class associated to the <code>DC_Event</code>
 * class is <CODE>DC_EventRepository</CODE>.
 * Events should normally be manipulated only by their associated <i>event
 * repository</i>. Applications should normally have no need to directly
 * interact with an event object.
 * <p>
 * This class is intended to be very light-weight because it may be
 * instantiated in large numbers within an event repository.
 * For this reason, unlike most OBS Framework classes, it is a stand-alone class
 * which does not inherit from <CODE>DC_RootObject</CODE>. This is a deviation
 * from project-specific coding rule PR1.1.
 * @see DC_EventRepository
 * @author A. Pasetti(P&P Software GmbH)
 * @version 1.o
 */
#define TYPE_DC_EVENT "dc_event"

void DC_Event_register(void);


///////////////////////////////////////////////////////////////////////////////
//
//                            class and struct
//
///////////////////////////////////////////////////////////////////////////////

struct DC_Event {
    Object parent;

    TD_ObsTime timeStamp;
    TD_EventType evtType;
};


struct DC_EventClass {
    ObjectClass parent_class;
};


#define DC_EVENT_GET_CLASS(obj) \
        OBJECT_GET_CLASS(DC_EventClass, obj, TYPE_DC_EVENT)

#define DC_EVENT_CLASS(klass) \
        OBJECT_CLASS_CHECK(DC_EventClass, klass, TYPE_DC_EVENT)

#define DC_EVENT(obj) \
        OBJECT_CHECK(DC_Event, obj, TYPE_DC_EVENT)


DC_Event* DC_Event_new(void);


///////////////////////////////////////////////////////////////////////////////
//
//                 non-virtual member method(s) declaration
//
///////////////////////////////////////////////////////////////////////////////

/**
 * Getter method for the time stamp attribute of the event.
 * @return the time stamp
 */
TD_ObsTime DC_Event_getTimeStamp(const DC_Event *This);

/**
 * Getter method for the event identifier attribute of the event.
 * @return the event type
 */
TD_EventType DC_Event_getEventType(const DC_Event *This);

/**
 * Setter method for the time stamp attribute of the event.
 * @param timeStamp the event time stamp
 */
void DC_Event_setTimeStamp(DC_Event *This, TD_ObsTime timeStamp);

/**
 * Setter method for the event identifier attribute of the event.
 * @param eventType the event type
 */
void DC_Event_setEventType(DC_Event *This, TD_EventType eventType);


#endif
