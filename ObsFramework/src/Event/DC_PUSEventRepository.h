//
//
// DC_PUSEventRepository.h
//
//
// Change Record:


#ifndef DC_PUSEVENTREPOSITORY_H
#define DC_PUSEVENTREPOSITORY_H


#include "../GeneralInclude/ForwardDeclarations.h"
#include "../GeneralInclude/BasicTypes.h"
#include "../Event/DC_EventRepository.h"
#include "../Qom/object.h"


/*
 * Event repository for PUS applications.
 * This event repository differs from the basic repository implemented by its
 * base class in that it processes telecommand-related events separately from
 * other events. For this purpose, it adds two new <code>create</code> methods
 * that intercept events generated by PUS telecommands(i.e. events whose originator
 * is a component of type <code>PUSTelecommand</code>) and by PUS telecommand 
 * manoeuvres(i.e. events whose originator is a component of type
 * <code>PUSTcManoeuvre</code>). Events of this kind signal a change in execution
 * status of a PUS telecommand. Their detection results in the generation of
 * a telecommand verification telemetry packet(instance of class 
 * <code>DC_PUSTcVerificationPacket</code>). 
 * <p>
 * The events that are intercepted by this repository and the way they are interpreted
 * is as follows:<ul>
 * <li>EVT_TC_LOADED is interpreted as: "telecommand acceptance - success".</li>
 * <li>EVT_TC_NOT_VALID is interpreted as: "telecommand acceptance - failure". The error
 * code in the verification telemetry packet is the <i>validity check code</i> of the telecommand
 * if this is different from zero, otherwise it is the event identifier EVT_TC_NOT_VALID.</li>
 * <li>EVT_TC_LIST_FULL is interpreted as: "telecommand acceptance - failure". The error
 * code in the verification telemetry packet is the event identifier EVT_TC_LIST_FULL.</li>
 * <li>EVT_MAN_STARTED is interpreted as: "telecommand execution start - success". This
 * event identifier can only be generated for manoeuvre telecommands.</li>
 * <li>EVT_MAN_LIST_FULL is interpreted as: "telecommand execution start - failure". The error
 * code in the verification telemetry packet is the event identifier EVT_MAN_LIST_FULL. This
 * event identifier can only be generated for manoeuvre telecommands.</li>
 * <li>EVT_TC_EXEC_CHECK_FAIL is interpreted as: "telecommand execution start - failure". The error
 * code in the verification telemetry packet is the <i>execution check code</i> of the telecommand
 * if this is different from zero, otherwise it is the event identifier EVT_TC_EXEC_CHECK_FAIL.</li>
 * <li>EVT_TC_ABORTED is interpreted as: "telecommand execution start - failure". The error
 * code in the verification telemetry packet is the event identifier EVT_TC_ABORTED.</li>
 * <li>EVT_MAN_PROGRESS is interpreted as: "telecommand execution progress - success". This
 * event identifier can only be generated for telemecommand manoeuvres.</li>
 * <li>EVT_TC_EXEC_SUCC is interpreted as: "telecommand execution completion - success". </li>
 * <li>EVT_TC_EXEC_FAIL is interpreted as: "telecommand execution completion - failure". The error
 * code in the verification telemetry packet is the <i>outcome code</i> of the telecommand.</li>
 * <li>EVT_MAN_ABORTED is interpreted as: "telecommand execution progress - failure". The error
 * code in the verification telemetry packet is the <i>continuation check code</i> of the telecommand
 * manoeuvre if this is different from zero, otherwise it is the event identifier EVT_MAN_ABORTED. This
 * event identifier can only be generated for telemecommand manoeuvres.</li>
 * <li>EVT_MAN_TERMINATED is interpreted as: "telecommand execution completion - success". This
 * event identifier can only be generated for telemecommand manoeuvres.</li>
 * </ul>
 * For events that indicate "success", the disptaching of the associated telemetry packet is only
 * done if the telecommand had set the associated "acknowledge flag". 
 * @todo Verify whether the declaration and implementation of method create(CC_RootObject*,TD_EventId)
 * is really needed(try omitting it on the gnu compiler). Its presence seems unnecessary and it
 * is undesirable because it adds a level of indirection
 * @todo Modify the processing of the events denoting "success" to include a check on the 
 * acknowledge flag of the telecommand that is being verified: a verification packet should
 * only be sent in case of success if this is explicitly requested by the telecommand through
 * its acknowledge flags(see pag. 44 of PUS standard).
 * to most calls of the event creation service. 
 * @see PUSTelecommand
 * @see PUSTcManoeuvre
 * @see DC_PUSTcVerificationPacket
 * @author Alessandro Pasetti(P&P Software)
 * @version 1.0
 * @ingroup PUS
 */
#define TYPE_DC_PUSEVENTREPOSITORY "dc_puseventrepository"

void DC_PUSEventRepository_register(void);


///////////////////////////////////////////////////////////////////////////////
//
//                            class and struct
//
///////////////////////////////////////////////////////////////////////////////

struct DC_PUSEventRepository {
    DC_EventRepository parent;

    CC_TelemetryManager *pTmManager;
};


struct DC_PUSEventRepositoryClass {
    DC_EventRepositoryClass parent_class;
};


#define DC_PUSEVENTREPOSITORY_GET_CLASS(obj) \
        OBJECT_GET_CLASS(DC_PUSEventRepositoryClass, \
                                            obj, TYPE_DC_PUSEVENTREPOSITORY)

#define DC_PUSEVENTREPOSITORY_CLASS(klass) \
        OBJECT_CLASS_CHECK(DC_PUSEventRepositoryClass, \
                                          klass, TYPE_DC_PUSEVENTREPOSITORY)

#define DC_PUSEVENTREPOSITORY(obj) \
        OBJECT_CHECK(DC_PUSEventRepository, obj, TYPE_DC_PUSEVENTREPOSITORY)


DC_PUSEventRepository* DC_PUSEventRepository_new(void);


///////////////////////////////////////////////////////////////////////////////
//
//                 non-virtual member method(s) declaration
//
///////////////////////////////////////////////////////////////////////////////

/**
 * General interface of event creation sevice for event originators of type
 * <code>PUSTelecommand</code> or <code>PUSTcManoeuvre</code>.
 *
 * @param originator the originator of the event
 * @param eventId the event type identifier
 */

void DC_PUSEventRepository_create
(
    DC_PUSEventRepository *This, 
    Object *originator, 
    TD_EventType eventId
);

/**
 * Implement the event creation service for event originators of type
 * <code>PUSTelecommand</code>. A pseudo-code implementation for this method
 * is as follows: <pre>
 *  DC_PUSEventRepository_if( DC_PUSEventRepository_isEnabled(void) && DC_PUSEventRepository_isEnabled(eventId) ) {
 *      allocate a TC verification packet from the telemetry packet factory
 *      DC_PUSEventRepository_if(allocation fails) {
 *          DC_PUSEventRepository_creat e(DC_PUSEventRepository *This, (CC_RootObject*)originator, EVT_TM_PCK_ALLOC_FAIL);
 *          DC_PUSEventRepository_creat e(DC_PUSEventRepository *This, (CC_RootObject*)originator, eventId); 
 *          return;
 *      }
 *      configure TC verification packet according to value of eventId;
 *      submit TC verification packet to TM manager for immediate dispatch;
 *      DC_PUSEventRepository_creat e(DC_PUSEventRepository *This, (CC_RootObject*)originator, eventId); 
 *  } </pre>
 * The mapping of the event identifiers to the configuration of the TC verification 
 * packet is explained in the class comment. The last instruction in the "if"
 * clause indicates that the event processing is delegated to the default version
 * of the <code>create</code> method provided by the superclass <code>DC_EventRepositor</code>.
 * If the event is a "success event", then the above processing is only performed
 * if the associated "acknowledge flag" in the telecommand is set.
 * @param originator the originator of the event
 * @param eventId the event type identifier
 */
static void createPUSTelecommand
(
    DC_PUSEventRepository *This, 
    PUSTelecommand *originator, 
    TD_EventType eventId
);

/**
 * Implement the event creation service for event originators of type
 * <code>PUSTcManoeuvre</code>. The implementation logic of this method is
 * the same as for the <code>DC_PUSEventRepository_create(PUSTelecommand*, TD_EventType)</code> method
 * in this same class.
 * @param originator the originator of the event
 * @param eventId the event type identifier
 */
static void createPUSTcManoeuvre
(
    DC_PUSEventRepository *This,
    PUSTcManoeuvre *originator, 
    TD_EventType eventId
);

/**
 * Load the telemetry manager component. The event repository needs access to
 * the telemetry manager to dispatch the telecommand verification telemetry 
 * packet.
 * @param pTmManager the telemetry manager
 */
void DC_PUSEventRepository_setTelemetryManager
(
    DC_PUSEventRepository *This, 
    CC_TelemetryManager *pTmManager
);

/**
 * Return the telemetry manager component.
 * @see #setTelemetryManager
 * @return the the telemetry manager
 */
CC_TelemetryManager* DC_PUSEventRepository_getTelemetryManager
(
    const DC_PUSEventRepository *This
);


#endif
