//
//
// StructuredTelemetryPacket.h
//
//
// Change Record:


#ifndef STRUCTUREDTELEMETRYPACKET_H
#define STRUCTUREDTELEMETRYPACKET_H


#include "../GeneralInclude/ForwardDeclarations.h"
#include "../GeneralInclude/BasicTypes.h"
#include "TelemetryPacket.h"
#include "../Qom/object.h"


/*
 * Specialization of the <code>TelemetryPacket</code> abstract class that
 * defines a default data structure where the telemetry data can be
 * held.
 * This is still an abstract class because no implementation can be
 * given for the <i>data update service</i> and the
 * <i>data acquisition service</i>.
 * <p>
 * This class defines an array data structure to hold the telemetry bytes.
 * This data structure is called the <i>internal telemetry buffer</i>.
 * This class is responsible for declaring and initializing this data
 * structure. Instances of this class can only be used after this data
 * structure has been initialized by calling method
 * <code>setNumberOfBytes</code>. This class is especially well suited
 * to modelling telemetry packets with a fixed size.
 * <p>
 * By default, the telemetry data generated by a <code>TelemetryPacket</code> are seen
 * as a sequence of bytes. This class allows them to be seen also as a
 * sequence of 2-bytes words, or as a sequence of 4-bytes longwords.
 * This is done by providing two additional implementations of the
 * data acquisition service. The default implementation <code>getUnsignedByte</code>
 * declared by the <code>TelemetryPacket</code> superclass is complemented
 * by two additional implementations <code>getUnsignedShort</code> and
 * <code>getUnsignedInt</code> that return, respectively, sequences of
 * 2-byte words and of 4-byte longwords.
 * @author Alessandro Pasetti(P&P Software GmbH)
 * @version 1.0
 * @ingroup Telemetry
 */
#define TYPE_STRUCTUREDTELEMETRYPACKET "structuredtelemetrypacket"

void StructuredTelemetryPacket_register(void);


///////////////////////////////////////////////////////////////////////////////
//
//                            class and struct
//
///////////////////////////////////////////////////////////////////////////////

struct StructuredTelemetryPacket {
    TelemetryPacket parent;

    unsigned char *pByteBuffer;			// overlaid arrays to hold
    unsigned short *pShortBuffer;		// telemetry data
    unsigned int *pIntBuffer;
    unsigned int numberOfBytes;			// TM buffer length in bytes
};


struct StructuredTelemetryPacketClass {
    TelemetryPacketClass parent_class;
};


#define STRUCTUREDTELEMETRYPACKET_GET_CLASS(obj) \
        OBJECT_GET_CLASS(StructuredTelemetryPacketClass, \
                                           obj, TYPE_STRUCTUREDTELEMETRYPACKET)

#define STRUCTUREDTELEMETRYPACKET_CLASS(klass) \
        OBJECT_CLASS_CHECK(StructuredTelemetryPacketClass, \
                                         klass, TYPE_STRUCTUREDTELEMETRYPACKET)

#define STRUCTUREDTELEMETRYPACKET(obj) \
        OBJECT_CHECK(StructuredTelemetryPacket, \
                                           obj, TYPE_STRUCTUREDTELEMETRYPACKET)


StructuredTelemetryPacket* StructuredTelemetryPacket_new(void);


///////////////////////////////////////////////////////////////////////////////
//
//                 non-virtual member method(s) declaration
//
///////////////////////////////////////////////////////////////////////////////

/**
 * Method to load one byte item in the internal telemetry buffer.
 * This method is normally called by derived classes as part of their
 * implementation for method <code>update</code>.
 * A pseudo-code implementation for this method is as follows: <PRE>
 *		pByteBuffer[index] = d; </PRE>
 * Note that there is no check on the index being within bounds. This is
 * avoided for reasons of efficiency and because this is an "internal
 * method" that should be used by a trusted entity.
 * @see TelemetryPacket#getUnsignedByte
 * @see #setNumberOfBytes
 * @param index the index of the telemetry array where the telemetry packet
 * is loaded
 * @param d the value of the telemetry packet
 */
void StructuredTelemetryPacket_setUnsignedByte
(
    StructuredTelemetryPacket *This, 
    unsigned int index, 
    unsigned char data
);

/**
 * Method to load one 2-byte word item in the internal telemetry buffer.
 * This method is normally called by subclasses as part of their implementation
 * for method <code>update</code>.
 * A pseudo-code implementation for this method is as follows: <PRE>
 *		pShortBuffer[index] = d; </PRE>
 * Note that there is no check on the index being within bounds. This is
 * avoided for reasons of efficiency and because this is an "internal
 * method" that should be used by a trusted entity.
 * @see #getUnsignedShort
 * @see #setNumberOfBytes
 * @param index the index of the telemetry array where the telemetry packet
 * is loaded
 * @param d the value of the telemetry packet
 */
void StructuredTelemetryPacket_setUnsignedShort
(
    StructuredTelemetryPacket *This, 
    unsigned int index,
    unsigned short data
);

/**
 * Method to load one 4-byte longword item in the internal telemetry buffer.
 * This method is normally called by subclasses as part of their implementation
 * for method <code>update</code>.
 * A pseudo-code implementation for this method is as follows: <PRE>
 *		pIntBuffer[index] = d; </PRE>
 * Note that there is no check on the index being within bounds. This is
 * avoided for reasons of efficiency and because this is an "internal
 * method" that should be used by a trusted entity.
 * @see #getUnsignedInt
 * @see #setNumberOfBytes
 * @param index the index of the telemetry array where the telemetry packet
 * is loaded
 * @param d the value of the telemetry packet
 */
void StructuredTelemetryPacket_setUnsignedInt
(
    StructuredTelemetryPacket *This, 
    unsigned int index,
    unsigned int data
);

/**
 * Set the size of the internal telemetry buffer and initialize the
 * corresponding internal data structures.
 * The buffer data structures are declared as: <PRE>
 *      unsigned char* pByteBuffer;
 *      unsigned short* pShortBuffer;
 *      unsigned int* pIntBuffer; </PRE>
 * A pseudo-code implementation for this method is as follows:<PRE>
 *      pByteBuffer = new unsigned char[n];
 *      pShortBuffer = (unsigned short*)pByteBuffer;
 *      pIntBuffer = (unsigned int*)pByteBuffer; </PRE>
 * The three buffers are thus overlaid. Precautions are taken to ensure
 * that the type casts will always succeed, even on platforms where
 * alignment constraints apply.
 * <p>
 * It is up to subclasses to decide whether they prefer to treat their
 * telemetry data as a sequence of bytes, as a sequence of 2-byte words, 
 * or as a sequence of 4-bytes longwords.
 * Derived classes load the telemetry buffers by using methods
 * <code>setUnsignedByte</code>, <code>setUnsignedShort</code> and
 * <code>setUnsignedInt</code>.
 * <p>
 * This is an initialization method. It should be called before the
 * structure telemetry packet is used the first time and it should not be called more
 * than once. Successive calls have no effect.
 * <p>
 * Note that the number of bytes should be greater than 0.
 * <p>
 * This method deviates from the project-specific coding rule PR3.1.
 * Use of pointers to variables of primitive type is necessary to allow
 * efficient implementation of the telemetry getter methods.
 * @param n number of bytes in this telemetry StructuredTelemetryPacket_packet(size of the internal
 * telemetry buffer)
 */
void StructuredTelemetryPacket_setNumberOfBytes
(
    StructuredTelemetryPacket *This, 
    unsigned int n
);

/**
 * Implement the <i>data acquisition service</i> for the word-oriented case.
 * The telemetry data provided by this class are treated as a sequence
 * of 2-byte words.
 * The method returns the n-th telemetry packet.
 * The parameter n must lie in the interval [0, N/2-1] where N is the
 * number of telemetry StructuredTelemetryPacket_bytes(the return value
 * of method <CODE>getNumberOfBytes</CODE>).
 * @see #setNumberOfBytes
 * @return value of n-th telemetry byte
 * @param n the telemetry byte to be StructuredTelemetryPacket_returned(starting with byte 0)
 */
unsigned short StructuredTelemetryPacket_getUnsignedShort
(
    StructuredTelemetryPacket *This,
    unsigned int n
);

/**
 * Implement the <i>data acquisition service</i> for the longword-oriented
 * case.
 * The telemetry data provided by this class are treated as a sequence
 * of 4-byte longwords.
 * The method returns the n-th telemetry longword.
 * The parameter n must lie in the interval [0, N/4-1] where N is the
 * number of telemetry StructuredTelemetryPacket_bytes(the return value
 * of method <CODE>getNumberOfBytes</CODE>).
 * @see #setNumberOfBytes
 * @return value of n-th telemetry byte
 * @param n the telemetry byte to be StructuredTelemetryPacket_returned(starting with byte 0)
 */
unsigned int StructuredTelemetryPacket_getUnsignedInt
(
    StructuredTelemetryPacket *This,
    unsigned int n
);


#endif
